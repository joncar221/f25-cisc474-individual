/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HomeUsersPageRouteImport } from './routes/home/users/page'
import { Route as HomeInboxPageRouteImport } from './routes/home/inbox/page'
import { Route as HomeCoursesPageRouteImport } from './routes/home/courses/page'
import { Route as HomeCoursesCreateRouteImport } from './routes/home/courses/create'
import { Route as HomeBackendPageRouteImport } from './routes/home/backend/page'
import { Route as HomeAssignmentsPageRouteImport } from './routes/home/assignments/page'
import { Route as HomeCoursesEditCourseIdRouteImport } from './routes/home/courses/edit/$courseId'
import { Route as HomeCoursesDeleteCourseIdRouteImport } from './routes/home/courses/delete/$courseId'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeUsersPageRoute = HomeUsersPageRouteImport.update({
  id: '/users/page',
  path: '/users/page',
  getParentRoute: () => HomeRoute,
} as any)
const HomeInboxPageRoute = HomeInboxPageRouteImport.update({
  id: '/inbox/page',
  path: '/inbox/page',
  getParentRoute: () => HomeRoute,
} as any)
const HomeCoursesPageRoute = HomeCoursesPageRouteImport.update({
  id: '/courses/page',
  path: '/courses/page',
  getParentRoute: () => HomeRoute,
} as any)
const HomeCoursesCreateRoute = HomeCoursesCreateRouteImport.update({
  id: '/courses/create',
  path: '/courses/create',
  getParentRoute: () => HomeRoute,
} as any)
const HomeBackendPageRoute = HomeBackendPageRouteImport.update({
  id: '/backend/page',
  path: '/backend/page',
  getParentRoute: () => HomeRoute,
} as any)
const HomeAssignmentsPageRoute = HomeAssignmentsPageRouteImport.update({
  id: '/assignments/page',
  path: '/assignments/page',
  getParentRoute: () => HomeRoute,
} as any)
const HomeCoursesEditCourseIdRoute = HomeCoursesEditCourseIdRouteImport.update({
  id: '/courses/edit/$courseId',
  path: '/courses/edit/$courseId',
  getParentRoute: () => HomeRoute,
} as any)
const HomeCoursesDeleteCourseIdRoute =
  HomeCoursesDeleteCourseIdRouteImport.update({
    id: '/courses/delete/$courseId',
    path: '/courses/delete/$courseId',
    getParentRoute: () => HomeRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/home/assignments/page': typeof HomeAssignmentsPageRoute
  '/home/backend/page': typeof HomeBackendPageRoute
  '/home/courses/create': typeof HomeCoursesCreateRoute
  '/home/courses/page': typeof HomeCoursesPageRoute
  '/home/inbox/page': typeof HomeInboxPageRoute
  '/home/users/page': typeof HomeUsersPageRoute
  '/home/courses/delete/$courseId': typeof HomeCoursesDeleteCourseIdRoute
  '/home/courses/edit/$courseId': typeof HomeCoursesEditCourseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/home/assignments/page': typeof HomeAssignmentsPageRoute
  '/home/backend/page': typeof HomeBackendPageRoute
  '/home/courses/create': typeof HomeCoursesCreateRoute
  '/home/courses/page': typeof HomeCoursesPageRoute
  '/home/inbox/page': typeof HomeInboxPageRoute
  '/home/users/page': typeof HomeUsersPageRoute
  '/home/courses/delete/$courseId': typeof HomeCoursesDeleteCourseIdRoute
  '/home/courses/edit/$courseId': typeof HomeCoursesEditCourseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/home/assignments/page': typeof HomeAssignmentsPageRoute
  '/home/backend/page': typeof HomeBackendPageRoute
  '/home/courses/create': typeof HomeCoursesCreateRoute
  '/home/courses/page': typeof HomeCoursesPageRoute
  '/home/inbox/page': typeof HomeInboxPageRoute
  '/home/users/page': typeof HomeUsersPageRoute
  '/home/courses/delete/$courseId': typeof HomeCoursesDeleteCourseIdRoute
  '/home/courses/edit/$courseId': typeof HomeCoursesEditCourseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/home/assignments/page'
    | '/home/backend/page'
    | '/home/courses/create'
    | '/home/courses/page'
    | '/home/inbox/page'
    | '/home/users/page'
    | '/home/courses/delete/$courseId'
    | '/home/courses/edit/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/home/assignments/page'
    | '/home/backend/page'
    | '/home/courses/create'
    | '/home/courses/page'
    | '/home/inbox/page'
    | '/home/users/page'
    | '/home/courses/delete/$courseId'
    | '/home/courses/edit/$courseId'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/home/assignments/page'
    | '/home/backend/page'
    | '/home/courses/create'
    | '/home/courses/page'
    | '/home/inbox/page'
    | '/home/users/page'
    | '/home/courses/delete/$courseId'
    | '/home/courses/edit/$courseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/users/page': {
      id: '/home/users/page'
      path: '/users/page'
      fullPath: '/home/users/page'
      preLoaderRoute: typeof HomeUsersPageRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/inbox/page': {
      id: '/home/inbox/page'
      path: '/inbox/page'
      fullPath: '/home/inbox/page'
      preLoaderRoute: typeof HomeInboxPageRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/courses/page': {
      id: '/home/courses/page'
      path: '/courses/page'
      fullPath: '/home/courses/page'
      preLoaderRoute: typeof HomeCoursesPageRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/courses/create': {
      id: '/home/courses/create'
      path: '/courses/create'
      fullPath: '/home/courses/create'
      preLoaderRoute: typeof HomeCoursesCreateRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/backend/page': {
      id: '/home/backend/page'
      path: '/backend/page'
      fullPath: '/home/backend/page'
      preLoaderRoute: typeof HomeBackendPageRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/assignments/page': {
      id: '/home/assignments/page'
      path: '/assignments/page'
      fullPath: '/home/assignments/page'
      preLoaderRoute: typeof HomeAssignmentsPageRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/courses/edit/$courseId': {
      id: '/home/courses/edit/$courseId'
      path: '/courses/edit/$courseId'
      fullPath: '/home/courses/edit/$courseId'
      preLoaderRoute: typeof HomeCoursesEditCourseIdRouteImport
      parentRoute: typeof HomeRoute
    }
    '/home/courses/delete/$courseId': {
      id: '/home/courses/delete/$courseId'
      path: '/courses/delete/$courseId'
      fullPath: '/home/courses/delete/$courseId'
      preLoaderRoute: typeof HomeCoursesDeleteCourseIdRouteImport
      parentRoute: typeof HomeRoute
    }
  }
}

interface HomeRouteChildren {
  HomeAssignmentsPageRoute: typeof HomeAssignmentsPageRoute
  HomeBackendPageRoute: typeof HomeBackendPageRoute
  HomeCoursesCreateRoute: typeof HomeCoursesCreateRoute
  HomeCoursesPageRoute: typeof HomeCoursesPageRoute
  HomeInboxPageRoute: typeof HomeInboxPageRoute
  HomeUsersPageRoute: typeof HomeUsersPageRoute
  HomeCoursesDeleteCourseIdRoute: typeof HomeCoursesDeleteCourseIdRoute
  HomeCoursesEditCourseIdRoute: typeof HomeCoursesEditCourseIdRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeAssignmentsPageRoute: HomeAssignmentsPageRoute,
  HomeBackendPageRoute: HomeBackendPageRoute,
  HomeCoursesCreateRoute: HomeCoursesCreateRoute,
  HomeCoursesPageRoute: HomeCoursesPageRoute,
  HomeInboxPageRoute: HomeInboxPageRoute,
  HomeUsersPageRoute: HomeUsersPageRoute,
  HomeCoursesDeleteCourseIdRoute: HomeCoursesDeleteCourseIdRoute,
  HomeCoursesEditCourseIdRoute: HomeCoursesEditCourseIdRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
