/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardUsersPageRouteImport } from './routes/dashboard/users/page'
import { Route as DashboardInboxPageRouteImport } from './routes/dashboard/inbox/page'
import { Route as DashboardCoursesPageRouteImport } from './routes/dashboard/courses/page'
import { Route as DashboardCoursesCreateRouteImport } from './routes/dashboard/courses/create'
import { Route as DashboardBackendPageRouteImport } from './routes/dashboard/backend/page'
import { Route as DashboardAssignmentsPageRouteImport } from './routes/dashboard/assignments/page'
import { Route as DashboardCoursesEditCourseIdRouteImport } from './routes/dashboard/courses/edit/$courseId'
import { Route as DashboardCoursesDeleteCourseIdRouteImport } from './routes/dashboard/courses/delete/$courseId'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUsersPageRoute = DashboardUsersPageRouteImport.update({
  id: '/dashboard/users/page',
  path: '/dashboard/users/page',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardInboxPageRoute = DashboardInboxPageRouteImport.update({
  id: '/dashboard/inbox/page',
  path: '/dashboard/inbox/page',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardCoursesPageRoute = DashboardCoursesPageRouteImport.update({
  id: '/dashboard/courses/page',
  path: '/dashboard/courses/page',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardCoursesCreateRoute = DashboardCoursesCreateRouteImport.update({
  id: '/dashboard/courses/create',
  path: '/dashboard/courses/create',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardBackendPageRoute = DashboardBackendPageRouteImport.update({
  id: '/dashboard/backend/page',
  path: '/dashboard/backend/page',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardAssignmentsPageRoute =
  DashboardAssignmentsPageRouteImport.update({
    id: '/dashboard/assignments/page',
    path: '/dashboard/assignments/page',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardCoursesEditCourseIdRoute =
  DashboardCoursesEditCourseIdRouteImport.update({
    id: '/dashboard/courses/edit/$courseId',
    path: '/dashboard/courses/edit/$courseId',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardCoursesDeleteCourseIdRoute =
  DashboardCoursesDeleteCourseIdRouteImport.update({
    id: '/dashboard/courses/delete/$courseId',
    path: '/dashboard/courses/delete/$courseId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/dashboard/assignments/page': typeof DashboardAssignmentsPageRoute
  '/dashboard/backend/page': typeof DashboardBackendPageRoute
  '/dashboard/courses/create': typeof DashboardCoursesCreateRoute
  '/dashboard/courses/page': typeof DashboardCoursesPageRoute
  '/dashboard/inbox/page': typeof DashboardInboxPageRoute
  '/dashboard/users/page': typeof DashboardUsersPageRoute
  '/dashboard/courses/delete/$courseId': typeof DashboardCoursesDeleteCourseIdRoute
  '/dashboard/courses/edit/$courseId': typeof DashboardCoursesEditCourseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/dashboard/assignments/page': typeof DashboardAssignmentsPageRoute
  '/dashboard/backend/page': typeof DashboardBackendPageRoute
  '/dashboard/courses/create': typeof DashboardCoursesCreateRoute
  '/dashboard/courses/page': typeof DashboardCoursesPageRoute
  '/dashboard/inbox/page': typeof DashboardInboxPageRoute
  '/dashboard/users/page': typeof DashboardUsersPageRoute
  '/dashboard/courses/delete/$courseId': typeof DashboardCoursesDeleteCourseIdRoute
  '/dashboard/courses/edit/$courseId': typeof DashboardCoursesEditCourseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/dashboard/assignments/page': typeof DashboardAssignmentsPageRoute
  '/dashboard/backend/page': typeof DashboardBackendPageRoute
  '/dashboard/courses/create': typeof DashboardCoursesCreateRoute
  '/dashboard/courses/page': typeof DashboardCoursesPageRoute
  '/dashboard/inbox/page': typeof DashboardInboxPageRoute
  '/dashboard/users/page': typeof DashboardUsersPageRoute
  '/dashboard/courses/delete/$courseId': typeof DashboardCoursesDeleteCourseIdRoute
  '/dashboard/courses/edit/$courseId': typeof DashboardCoursesEditCourseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/dashboard/assignments/page'
    | '/dashboard/backend/page'
    | '/dashboard/courses/create'
    | '/dashboard/courses/page'
    | '/dashboard/inbox/page'
    | '/dashboard/users/page'
    | '/dashboard/courses/delete/$courseId'
    | '/dashboard/courses/edit/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/dashboard/assignments/page'
    | '/dashboard/backend/page'
    | '/dashboard/courses/create'
    | '/dashboard/courses/page'
    | '/dashboard/inbox/page'
    | '/dashboard/users/page'
    | '/dashboard/courses/delete/$courseId'
    | '/dashboard/courses/edit/$courseId'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/dashboard/assignments/page'
    | '/dashboard/backend/page'
    | '/dashboard/courses/create'
    | '/dashboard/courses/page'
    | '/dashboard/inbox/page'
    | '/dashboard/users/page'
    | '/dashboard/courses/delete/$courseId'
    | '/dashboard/courses/edit/$courseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  DashboardAssignmentsPageRoute: typeof DashboardAssignmentsPageRoute
  DashboardBackendPageRoute: typeof DashboardBackendPageRoute
  DashboardCoursesCreateRoute: typeof DashboardCoursesCreateRoute
  DashboardCoursesPageRoute: typeof DashboardCoursesPageRoute
  DashboardInboxPageRoute: typeof DashboardInboxPageRoute
  DashboardUsersPageRoute: typeof DashboardUsersPageRoute
  DashboardCoursesDeleteCourseIdRoute: typeof DashboardCoursesDeleteCourseIdRoute
  DashboardCoursesEditCourseIdRoute: typeof DashboardCoursesEditCourseIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/users/page': {
      id: '/dashboard/users/page'
      path: '/dashboard/users/page'
      fullPath: '/dashboard/users/page'
      preLoaderRoute: typeof DashboardUsersPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/inbox/page': {
      id: '/dashboard/inbox/page'
      path: '/dashboard/inbox/page'
      fullPath: '/dashboard/inbox/page'
      preLoaderRoute: typeof DashboardInboxPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/courses/page': {
      id: '/dashboard/courses/page'
      path: '/dashboard/courses/page'
      fullPath: '/dashboard/courses/page'
      preLoaderRoute: typeof DashboardCoursesPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/courses/create': {
      id: '/dashboard/courses/create'
      path: '/dashboard/courses/create'
      fullPath: '/dashboard/courses/create'
      preLoaderRoute: typeof DashboardCoursesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/backend/page': {
      id: '/dashboard/backend/page'
      path: '/dashboard/backend/page'
      fullPath: '/dashboard/backend/page'
      preLoaderRoute: typeof DashboardBackendPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/assignments/page': {
      id: '/dashboard/assignments/page'
      path: '/dashboard/assignments/page'
      fullPath: '/dashboard/assignments/page'
      preLoaderRoute: typeof DashboardAssignmentsPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/courses/edit/$courseId': {
      id: '/dashboard/courses/edit/$courseId'
      path: '/dashboard/courses/edit/$courseId'
      fullPath: '/dashboard/courses/edit/$courseId'
      preLoaderRoute: typeof DashboardCoursesEditCourseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/courses/delete/$courseId': {
      id: '/dashboard/courses/delete/$courseId'
      path: '/dashboard/courses/delete/$courseId'
      fullPath: '/dashboard/courses/delete/$courseId'
      preLoaderRoute: typeof DashboardCoursesDeleteCourseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  DashboardAssignmentsPageRoute: DashboardAssignmentsPageRoute,
  DashboardBackendPageRoute: DashboardBackendPageRoute,
  DashboardCoursesCreateRoute: DashboardCoursesCreateRoute,
  DashboardCoursesPageRoute: DashboardCoursesPageRoute,
  DashboardInboxPageRoute: DashboardInboxPageRoute,
  DashboardUsersPageRoute: DashboardUsersPageRoute,
  DashboardCoursesDeleteCourseIdRoute: DashboardCoursesDeleteCourseIdRoute,
  DashboardCoursesEditCourseIdRoute: DashboardCoursesEditCourseIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
